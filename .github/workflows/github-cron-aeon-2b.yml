name: Aeon flow 2b (aeon-branch)

on:
  workflow_dispatch: # manual trigger ability
  schedule:
    # Run every day at 7:14 AM MY time (11:14 PM UTC), evening
    - cron: '14 23 * * *' 

jobs:
  setup:
    runs-on: windows-2022
    permissions:
      contents: write # Grant write permissions for pushing changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: aeon-branch # Specify aeon-branch directly for the primary checkout
          path: . # CHANGE: Checkout to the root of the runner's working directory      

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.10'

      - name: Download 7-Zip installer
        run: |
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7z2301-x64.exe" -OutFile "7zip_installer.exe"

      - name: Install 7-Zip silently
        run: |
          Start-Process -FilePath ".\7zip_installer.exe" -ArgumentList "/S" -Wait

      - name: Add 7-Zip to PATH
        run: |
          $env:Path += ";C:\Program Files\7-Zip"
          echo "PATH updated"
        
      - name: Display system information
        shell: pwsh
        run: |
          echo "Windows version:"
          systeminfo
          echo "Python version"
          python -V
          echo "IP address"
          curl https://ipinfo.io/ip
          curl https://api.ipify.org
          Write-Host $PSVersionTable.PSVersion
          $PSVersionTable.PSVersion

      - name: Set display resolution to 1920x1080
        run: powershell.exe -Command "Set-DisplayResolution -Width 1920 -Height 1080 -Force"
                       
      - name: Unzip .7z
        run: |
          & "C:\Program Files\7-Zip\7z.exe" x runner-src/gather-aeon.7z -p${{ secrets.ZIP_PW }}

      - name: pip install
        run: pip install -r requirements.txt

      - name: Ensure log dirs exists (Windows)
        shell: pwsh
        run: |
          if (!(Test-Path "archived_logs")) {
            New-Item -ItemType Directory -Path "archived_logs"
          }
          if (!(Test-Path "latest_logs")) {
            New-Item -ItemType Directory -Path "latest_logs"
          }
          Write-Host "Created archived_logs: $(Test-Path 'archived_logs')"

      - name: Set permissions on log dirs
        shell: pwsh
        run: |
          $acl = Get-Acl "."
          Set-Acl "archived_logs" $acl
          Set-Acl "latest_logs" $acl

      - name: Run Python scripts concurrently (Windows)
        shell: pwsh
        run: |
          python aeon_cdp_args_032.py -c aeon-categories-2.txt -o aeon-out-part2.csv &
          Start-Sleep -Seconds 2
          python aeon_cdp_args_033_proxy.py -c aeon-categories-3.txt -o aeon-out-part3.csv -p proxy1.txt

          $file = "aeon-out-part2.csv"
          $maxAttempts = 4
          $delaySeconds = 45
          $found = $false
      
          for ($i = 1; $i -le $maxAttempts; $i++) {
            Write-Host "üîç Attempt $i: Checking for '$file'..."
            if (Test-Path $file) {
              Write-Host "‚úÖ File found: $file"
              $found = $true
              break
            } else {
              Write-Host "‚è≥ File not found. Waiting $delaySeconds seconds..."
              Start-Sleep -Seconds $delaySeconds
            }
          }
      
          if (-not $found) {
            Write-Host "‚ö†Ô∏è File '$file' was not found after $maxAttempts attempts. Continuing workflow..."
          }

          Write-Host "‚úÖ Scripts completed."

          # Check if file exists
          if (-Not (Test-Path $file) {
            Write-Error "** Output file1 does not exist, aborting **"
            exit 1
          }

          if (-Not (Test-Path "aeon-out-part3.csv")) {
            Write-Error "** Output file2 does not exist, aborting **"
            exit 1
          }
      
          # Check file size
          $filesize = (Get-Item $file).Length
          if ($filesize -lt 2500) {
            Write-Error "** Output file is too small ($filesize bytes), aborting **"
            exit 1
          }
      
          Write-Host "‚úÖ Validation passed: output file seems OK."

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Pull latest changes before push
        run: |
          git pull origin aeon-branch --rebase
          git push origin aeon-branch
         
      - name: Commit and push generated files
        run: |
          copy aeon-out-part* raw_data/
          git add raw_data/aeon-out-part2.csv     
          git add raw_data/aeon-out-part3.csv     
          git commit -m "Automated: Add generated Aeon 2 files" || echo "No changes to commit"
          git push origin aeon-branch              
